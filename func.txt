
@app.route("/api/user_upload", methods=["POST"])
def user_upload():
    try:
        # get URL query parameter
        course_name = str(request.args.get("courseName"))
        course_no = int(request.args.get("courseNo"))
        academic_year = int(request.args.get("academicYear"))
        semester = str(request.args.get("semester"))

        # parse JSON request body
        request_body = request.get_json()

        # convert to array data structure
        comments_array = request_body.get("comments", [])
        cmu_account = request_body.get("cmuAccount")

        batch_size = 10

        # convert array to batch format (array of array format)
        batches = [comments_array[i:i + batch_size]
                   for i in range(0, len(comments_array), batch_size)]

        # 1.get label from ml
        all_predicted_labels = []  # array of string
        for i, batch in enumerate(batches):
            payload = {"inputs": batch}
            predictions = query(payload, API_URL_LABEL)
            # if we cant get prediction data due to error
            if predictions is None:
                print("Skipping batch due to API error.")
                continue
            # Extract the predicted label for each sentence in the batch Assuming the first label is the predicted one
            predicted_labels_batch = [result[0]["label"]
                                      for result in predictions]
            print("predicted label batch:", predicted_labels_batch)

            all_predicted_labels.extend(predicted_labels_batch)

        # 2.get sentiment from ml
        all_predicted_sentiments = []  # array of string
        for i, batch in enumerate(batches):
            payload = {"inputs": batch}
            predictions = query(payload, API_URL_SENTIMENT)
            # if we cant get prediction data due to error
            if predictions is None:
                print("Skipping batch due to API error.")
                continue
            # Extract the predicted label for each sentence in the batch Assuming the first label is the predicted one
            predicted_sentiments_batch = [result[0]["label"]
                                          for result in predictions]
            print("predicted sentiment batch:", predicted_sentiments_batch)

            all_predicted_sentiments.extend(predicted_sentiments_batch)

        teaching_method_comments = []

        assessment_comments = []

        content_comments = []

        for i, comment_text in enumerate(comments_array):
            comment = {
                "text": comment_text,
                "sentiment": all_predicted_sentiments[i],
                "label": all_predicted_labels[i]
            }
            # split to 3 label array
            if comment["label"].lower() == "teaching_method":
                teaching_method_comments.append(comment)

            elif comment["label"].lower() == "exam":
                assessment_comments.append(comment)
            elif comment["label"].lower() == "content":
                content_comments.append(comment)

         # point at course
        existing_course = collection.find_one({
            "cmuAccount": cmu_account,
            "courseName": course_name,
            "courseNo": course_no,
            "academicYear": academic_year,
            "semester": semester,

        })

        # check if the course exist by document's object id
        if existing_course:
            return jsonify({"success": True, "message": "Already have exact cmuAccount,courseName,courseNo,semester,academicYear document"})
        else:
            # Insert a new course with comments
            print(teaching_method_comments)
            print(assessment_comments)
            print(content_comments)
            new_course = {
                "cmuAccount": cmu_account,
                "courseName": course_name,
                "courseNo": course_no,
                "academicYear": academic_year,
                "semester": semester,

                "teachingMethodComments": teaching_method_comments,
                "assessmentComments": assessment_comments,
                "contentComments": content_comments

            }
            collection.insert_one(new_course)
            return jsonify({"success": True, "message": "Insert as new course success"})

    except Exception as e:
        return jsonify({"success": False, "message": "Fail to add course due to some error", "error": str(e)}), 500



        ////////////



        # upload directly to DB
# @app.route("/api/upload", methods=["POST"])
# def upload_excel_data():
#     try:
#         # get URL request parameter
#         course_name = str(request.args.get("courseName"))
#         course_no = int(request.args.get("courseNo"))
#         academic_year = int(request.args.get("academicYear"))
#         semester = str(request.args.get("semester"))

#         # parse JSON request body
#         request_body = request.get_json()

#         # convert to array data structure
#         comments_array = request_body.get("comments", [])

#         batch_size = 10

#         # convert array to batch format (array of array format)
#         batches = [comments_array[i:i + batch_size]
#                    for i in range(0, len(comments_array), batch_size)]

#         # 1.get label from ml
#         all_predicted_labels = []  # array of string
#         for i, batch in enumerate(batches):
#             payload = {"inputs": batch}
#             predictions = query(payload, API_URL_LABEL)
#             # if we cant get prediction data due to error
#             if predictions is None:
#                 print("Skipping batch due to API error.")
#                 continue
#             # Extract the predicted label for each sentence in the batch Assuming the first label is the predicted one
#             predicted_labels_batch = [result[0]["label"]
#                                       for result in predictions]
#             print("predicted label batch:", predicted_labels_batch)

#             all_predicted_labels.extend(predicted_labels_batch)

#         # 2.get sentiment from ml
#         all_predicted_sentiments = []  # array of string
#         for i, batch in enumerate(batches):
#             payload = {"inputs": batch}
#             predictions = query(payload, API_URL_SENTIMENT)
#             # if we cant get prediction data due to error
#             if predictions is None:
#                 print("Skipping batch due to API error.")
#                 continue
#             # Extract the predicted label for each sentence in the batch Assuming the first label is the predicted one
#             predicted_sentiments_batch = [result[0]["label"]
#                                           for result in predictions]
#             print("predicted sentiment batch:", predicted_sentiments_batch)

#             all_predicted_sentiments.extend(predicted_sentiments_batch)

#         # print("predicted labels:", all_predicted_labels)
#         # print("predicted sentiment:", all_predicted_sentiments)

#         # comments = []
#         teaching_method_comments = []
#         assessment_comments = []
#         content_comments = []

#         for i, comment_text in enumerate(comments_array):
#             comment = {
#                 "text": comment_text,
#                 "sentiment": all_predicted_sentiments[i],
#                 "label": all_predicted_labels[i]
#             }
#             if comment["label"].lower() == "teaching_method":
#                 teaching_method_comments.append(comment)
#             elif comment["label"].lower() == "exam":
#                 assessment_comments.append(comment)
#             elif comment["label"].lower() == "content":
#                 content_comments.append(comment)

#          # point at course
#         existing_course = collection.find_one({
#             "courseNo": course_no,
#             "courseName": course_name,
#             "semester": semester,
#             "academicYear": academic_year
#         })

#         # check if the course exist by document's object id
#         if existing_course:
#             return jsonify({"success": True, "message": "Already have exact courseName,courseNo,semester,academicYear document"})
#         else:
#             # Insert a new course with comments
#             print(teaching_method_comments)
#             print(assessment_comments)
#             print(content_comments)
#             new_course = {
#                 "courseName": course_name,
#                 "courseNo": course_no,
#                 "academicYear": academic_year,
#                 "semester": semester,

#                 "teachingMethodComments": teaching_method_comments,
#                 "assessmentComments": assessment_comments,
#                 "contentComments": content_comments


#             }
#             collection.insert_one(new_course)
#             return jsonify({"success": True, "message": "Insert as new course success"})
#     except Exception as e:
#         return jsonify({"success": False, "message": "Fail to add course due to some error", "error": str(e)}), 500
